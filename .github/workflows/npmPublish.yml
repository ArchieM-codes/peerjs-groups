name: Publish to npm and GH Release on Dist Changes

on:
  push:
    paths:
      - 'dist/**'  # Trigger only when files in 'dist' directory change

jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write # Required for creating releases
      packages: write # Required to publish to npm
      pull-requests: write # Required to write pull-requests

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get Changed Files in Dist
        id: changed-files
        run: |
          CHANGED_FILES=$(git diff --name-only HEAD^ HEAD -- dist)
          echo "files=$CHANGED_FILES" >> $GITHUB_OUTPUT
          echo "::group::Changed Files"
          echo "$CHANGED_FILES"
          echo "::endgroup::"

          # Check for BREAKING_CHANGE.md directly within the changed files string
          if [[ "$CHANGED_FILES" == *"dist/BREAKING_CHANGE.md"* ]]; then
            echo "release_level=major" >> $GITHUB_OUTPUT
            echo "Detected a major change (BREAKING_CHANGE.md found)."
          else
            echo "release_level=minor" >> $GITHUB_OUTPUT
            echo "Detected a minor change."
          fi

      - name: Get Commit Message
        id: commit-message
        run: |
          COMMIT_MESSAGE=$(git log -1 --pretty=%B)
          echo "commit_message=$COMMIT_MESSAGE" >> $GITHUB_OUTPUT

      - name: Extract Version from Commit Message (if present)
        id: extract-version
        run: |
          # Extract version from commit message (e.g., "chore: Update dist files v1.2.3")
          VERSION=$(echo "${{ steps.commit-message.outputs.commit_message }}" | grep -o -E "v[0-9]+\.[0-9]+\.[0-9]+$")

          if [[ -n "$VERSION" ]]; then
            echo "version_from_commit=$VERSION" >> $GITHUB_OUTPUT
            echo "Found version in commit message: $VERSION"
          else
            echo "version_from_commit=" >> $GITHUB_OUTPUT # Set to empty if not found
            echo "No version found in commit message."
          fi

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'

      - name: Determine Next Version
        id: determine-version
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          RELEASE_LEVEL="${{ steps.changed-files.outputs.release_level }}"
          VERSION_FROM_COMMIT="${{ steps.extract-version.outputs.version_from_commit }}"

          if [[ -n "$VERSION_FROM_COMMIT" ]]; then
            # Use version from commit message if found
            NEW_VERSION="$VERSION_FROM_COMMIT"
            echo "Using version from commit message: $NEW_VERSION"
          elif [ "$RELEASE_LEVEL" == "major" ]; then
            NEW_VERSION=$(npm version major --no-git-tag-version | awk '{print $1}')
          else
            NEW_VERSION=$(npm version minor --no-git-tag-version | awk '{print $1}')
          fi

          if [ "$NEW_VERSION" == "$CURRENT_VERSION" ]; then
            echo "skip_version_bump=true" >> $GITHUB_OUTPUT
            echo "Version already up to date. Skipping version bump."
          else
            echo "skip_version_bump=false" >> $GITHUB_OUTPUT
            echo "Current version: $CURRENT_VERSION"
            echo "New version: $NEW_VERSION"
            echo "next_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          fi

      - name: Configure Git User
        if: steps.determine-version.outputs.skip_version_bump != 'true'
        run: |
          git config --local user.email "futuretech.coder4@gmail.com"
          git config --local user.name "volcar144"

      - name: Update package.json versions and commit
        if: steps.determine-version.outputs.skip_version_bump != 'true'
        run: |
          npm version "${{ steps.determine-version.outputs.next_version }}" --no-git-tag-version
          git add package.json
          git commit -m "chore: Bump version to ${{ steps.determine-version.outputs.next_version }}"

      - name: Create Pull Request
        id: create-pull-request
        if: steps.determine-version.outputs.skip_version_bump != 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore: Bump version for release"
          title: "Bump version for release"
          body: "Automated version bump for a new release."
          branch: release-version-bump
          base: main

      - name: Authenticate with npm
        if: steps.determine-version.outputs.skip_version_bump != 'true'
        run: |
          echo "//registry.npmjs.org/:_authToken=${NODE_AUTH_TOKEN}" > .npmrc

        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Publish package
        if: steps.determine-version.outputs.skip_version_bump != 'true'
        run: npm publish --access public

      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        if: ${{ steps.determine-version.outputs.skip_version_bump != 'true' && github.event_name == 'push' }}
        run: |
          VERSION=$(node -p "require('./package.json').version")
          gh release create "v$VERSION" --title "Release v$VERSION" --notes "Automated release"
